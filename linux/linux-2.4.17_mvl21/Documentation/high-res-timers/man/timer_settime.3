.\" Copyright (C) 2002 Robert Love (rml@tech9.net), MontaVista Software
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation, version 2.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.TH TIMER_SETTIME 3  2002-03-14 "Linux Manpage" "Linux Programmer's Manual"
.SH NAME
timer_settime \- set the expiration time for a POSIX timer
.SH SYNOPSIS
.B cc [ flag ... ] file -lrt [ library ... ]
.sp
.B #include <time.h>
.sp
.BI "int timer_settime(timer_t " timer_id ", int " flags ", const struct itimerspec *" new_setting ", const struct itimerspec *" old_setting ");"
.SH DESCRIPTION
.B timer_settime
sets the expiration time for the timer specified by
.IR timer_id ,
thus marking it active.  The
.IR it_value
field of
.IR new_value
specifies the expiration time in nanoseconds.  If the timer is already set
then it is reset to the new value specified by
.IR it_value .
If
.IR it_value
is zero, the timer is disabled.
.PP
The default behavior is to interpret the specified expiration time as relative
to the current time as of the call.  The
.BR TIMER_ABSTIME
flag specified in
.IR flags
will modify this behavior to make the value specified by
.IR it_value
absolute with respect to the clock associated with
.IR timer_id .
Thus, the timer will expire when the clock reaches the value specified by
.IR it_value .
If
.BR TIMER_ABSTIME
specifies a value which has already elapsed, the call will succeed and the
timer will immediately expire.
.PP
The interval at which the timer will subsequently expire is specified by
.IR it_interval .
If
.IR it_interval
is set to zero, the timer will expire only once, as specified by
.IR it_value .
In order to prevent timer intervals from overloading the system, the system
prevents setting
.IR it_interval
below a minimum value.  This minimum value is determined by an overload test,
the results of which are printed on boot.
.PP
If
.IR old_value
is non-NULL, the previous time remaining before expiration is stored in the
.IR itimerspec
structure pointed to by
.IR old_value .
.PP
Changes to the clock value (e.g. via
.BR clock_settime (3))
will not affect any timers.
.SH "RETURN VALUE"
On success,
.BR timer_settime
returns the value 0 and the timer specified by
.IR timer_id
is set as specified by
.IR new_value .
If
.IR old_value
is non-NULL, it contains the previous time remaining before expiration.
.PP
On failure,
.BR timer_settime
returns the value -1 and
.IR errno
is set appropriately.
.SH ERRORS
.TP
.BR EFAULT
A specified memory address is outside the address range of the calling process.
.TP
.BR EINVAL
.IR timer_id
or
.IR new_value
contain an invalid value.
.SH "CONFORMING TO"
POSIX 1003.1b (formerly POSIX.4) as ammended by POSIX 1003.1j-2000.
.SH "SEE ALSO"
.BR clock_getres (3),
.BR clock_gettime (3),
.BR clock_settime (3),
.BR clock_nanosleep (3),
.BR timer_create (3),
.BR timer_delete (3),
.BR timer_gettime (3),
.BR timer_getoverrun (3)
.sp
.I IEEE 1003.1b-1993
(POSIX.1b standard, formerly POSIX.4), Section 14 (Clocks and Timers).
