.\" Copyright (C) 2002 Robert Love (rml@tech9.net), MontaVista Software
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation, version 2.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.TH TIMER_GETOVERRUN 3  2002-03-14 "Linux Manpage" "Linux Programmer's Manual"
.SH NAME
timer_getoverrun \- get a POSIX timer's overrun count
.SH SYNOPSIS
.B cc [ flag ... ] file -lrt [ library ... ]
.sp
.B #include <time.h>
.sp
.BI "int timer_getoverrun(timer_t *" timer_id ");"
.SH DESCRIPTION
.B timer_getoverrun
returns the current overrun count for the timer specified by
.IR timer_id .
The overrun count is the number of timer expirations not delivered to the
process, since the last notification, due to an already pending signal from
.IR timer_id .
Overruns may occur because a timer can only post one signal per process at a
time.
.PP
The maximum overrun value is
.BR INT_MAX .
.PP
The Linux timer implementation also allows retrieving the overrun count from
the
.IR si_overrun
member of the
.IR siginfo
structure (see
.BR siginfo.h ).
This is an extension to the POSIX standard that avoids the system call overhead.
.SH "RETURN VALUE"
On success,
.BR timer_getoverrun
returns the overrun count for the given
.IR timer_id .
If the return value is 0, there were no overruns since the last notification.
.PP
On failure,
.BR timer_getoverrun
returns the value -1 and
.IR errno
is set appropriately.
.SH ERRORS
.TP
.BR EINVAL
The timer specified by
.IR timer_id
is invalid.
.SH "CONFORMING TO"
POSIX 1003.1b (formerly POSIX.4) as ammended by POSIX 1003.1j-2000.
.SH "SEE ALSO"
.BR clock_getres (3),
.BR clock_gettime (3),
.BR clock_settime (3),
.BR clock_nanosleep (3),
.BR timer_create (3),
.BR timer_delete (3),
.BR timer_settime (3),
.BR timer_gettime (3)
.sp
.I IEEE 1003.1b-1993
(POSIX.1b standard, formerly POSIX.4), Section 14 (Clocks and Timers).
